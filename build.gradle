plugins {
    id 'net.researchgate.release' version '2.4.0'
    id 'com.github.johnrengelman.shadow' version '1.2.3'
    id 'io.codearte.nexus-staging' version '0.9.0'
}

apply plugin: 'maven'
apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'application'
apply plugin: 'project-report'
apply plugin: 'signing'

nexusStaging {
    username=sonatypeUsername
    password=sonatypePassword
    packageGroup='de.otto'
}

static version() {
    return '2.3.3'
}

static isReleaseBuild() {
    return !version().contains("SNAPSHOT")
}

ext.pomVersion = version()

mainClassName = 'de.otto.jlineup.Main'

repositories {
    mavenCentral()
    mavenLocal()
    maven { url "https://oss.sonatype.org/content/repositories/releases/" }
    maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
}

dependencies {
    compile("org.seleniumhq.selenium:selenium-java:3.4.0") {
        exclude module: "selenium-edge-driver"
        exclude module: "selenium-ie-driver"
        exclude module: "selenium-opera-driver"
        exclude module: "selenium-safari-driver"
        exclude module: "htmlunit"
    }
    compile "io.github.bonigarcia:webdrivermanager:1.6.2"
    compile "com.beust:jcommander:1.72"
    compile "com.google.code.gson:gson:2.8.1"
    compile "ch.qos.logback:logback-classic:1.2.3"
    compile "org.thymeleaf:thymeleaf:3.0.6.RELEASE"
    testCompile "junit:junit:4.12"
    testCompile "org.mockito:mockito-core:2.8.9"
    testCompile "org.hamcrest:hamcrest-core:1.3"
    testCompile "org.hamcrest:hamcrest-library:1.3"
    testCompile "com.github.stefanbirkner:system-rules:1.16.1"
}

test {
    testLogging {
        exceptionFormat = 'full'
    }
}

/*
    manifest {
        attributes 'Implementation-Title': 'JLineup', 'Implementation-Version': version()
    }
*/

shadowJar {
    baseName = 'jlineup'
    classifier = null
    version = null
}

idea.project {
    jdkName = "1.8"
    languageLevel = "1.8"
    ipr.withXml { provider ->
        provider.node.component.find { it.@name == 'VcsDirectoryMappings' }.mapping.@vcs = 'Git'
    }
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from 'build/docs/javadoc'
}

task sourcesJar(type: Jar) {
    from sourceSets.main.allSource
    classifier = 'sources'
}

artifacts {
    archives sourcesJar
    archives javadocJar
    archives shadowJar
}

[distZip, distTar].each { task -> configurations.archives.artifacts.removeAll
        { it.class.simpleName == "ArchivePublishArtifact" && it.archiveTask == task }
    task.enabled = false
}

signing {
    required { isReleaseBuild() && gradle.taskGraph.hasTask('uploadArchives') }
    sign configurations.archives
}

tasks.processResources << {
    def resourcesDir = project.sourceSets.main.output.resourcesDir
    resourcesDir.mkdirs()

    def versionProperties = new File(resourcesDir, "version.properties")
    if (versionProperties) {
        def gitVersion = runCommand("git log -n1 --format=format:%H")
        def fullVersion = version()
        versionProperties.text = "\njlineup.commit = ${gitVersion}" + "\njlineup.version = ${fullVersion}"
    }
}

uploadArchives {
    configuration = configurations.archives
    repositories {
        mavenDeployer {
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

            // use this for local upload debugging instead of sonatype
            // repository(url: "file://${buildDir}/repo")

            repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                authentication(userName: sonatypeUsername, password: sonatypePassword)
            }

            snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                authentication(userName: sonatypeUsername, password: sonatypePassword)
            }

            pom.groupId = 'de.otto'
            pom.artifactId = 'jlineup'
            pom.version = version()

            pom.project {
                name 'JLineup'
                packaging 'jar'
                description 'Webapp image comparison tool'
                url 'http://github.com/otto-de/jlineup'

                scm {
                    url 'scm:git@github.com:otto-de/jlineup.git'
                    connection 'scm:git@github.com:otto-de/jlineup.git'
                }

                licenses {
                    license {
                        name 'The Apache Software License, Version 2.0'
                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }

                developers {
                    developer {
                        id 'mgeweke'
                        name 'Marco Geweke'
                        url 'https://github.com/MediaMarco'
                    }
                }
            }
        }
    }
}

static String runCommand(command) {
    Process proc = command.execute()
    def out = new StringBuffer()
    proc.consumeProcessOutputStream(out)
    proc.consumeProcessErrorStream(out)
    proc.waitFor()
    def errorlevel = proc.exitValue()
    if (errorlevel != 0) {
        throw new RuntimeException("exec failed on command: '${command}' with errorlevel ${errorlevel}".toString())
    }
    out.toString().trim()
}